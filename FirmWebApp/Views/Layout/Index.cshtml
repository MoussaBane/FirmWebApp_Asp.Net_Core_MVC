@model IEnumerable<Layout>
@using System.Linq
@using Microsoft.AspNetCore

@{
    ViewData["Title"] = "Layout";
}

<br />
<div class="text-center">
    <h1>Layout List</h1>
</div>

<br />
<hr />
<br />

<div class="container">
    <div class="row justify-content-center">
        <div class="col-10">
            <a  class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#createModal">
                Add New Layout
            </a>
            <table class="table table-hover">
                <thead>
                    <tr class="text-center">
                        <th scope="col">#</th>
                        <th scope="col">O_Id</th>
                        <th scope="col">Code</th>
                        <th scope="col">Name</th>
                        <th scope="col">Width</th>
                        <th scope="col">Height</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int rowNumber = 1; // Initialisation de la variable d'incrémentation
                    }
                    @foreach (var item in Model)
                    {
                        <tr class="text-center">
                            <td scope="row">@rowNumber</td>
                            <td scope="row">@item.Oid</td>
                            <td>@item.Code</td>
                            <td>@item.Name</td>
                            <td>@item.Width</td>
                            <td>@item.Height</td>
                            <td class="d-flex align-items-center justify-content-center">
                                <a data-layout-id="@item.Oid" class="btn btn-outline-primary m-2" data-bs-toggle="modal" data-bs-target="#editModal">
                                    Update
                                </a>

                                <a data-layout-id="@item.Oid" class="btn btn-outline-danger m-2" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                    Delete
                                </a>

                                <a href="@Url.Action("ShowLayoutScreen", "Layout", new { layoutId = item.Oid })" class="btn btn-outline-info m-2">
                                    Show
                                </a>
                                @* <button data-layout-id="@item.Oid" class="btn btn-outline-info m-2 show-button">
                                    Show
                                </button> *@
                            </td> 
                        </tr>
                        
                        rowNumber++; // Incrémentation pour la prochaine ligne
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@* For Create *@
@Html.Partial("CreateModal",new Layout())

@* For Delete *@
<div id="deleteModalContainer"></div>
<script>
    $(document).ready(function () {
        $(".btn-outline-danger").click(function () {
            const layoutId = $(this).data("layout-id");
            $("#deleteModalContainer").load("/Layout/DeleteModal?id=" + layoutId, function () {
                $("#deleteModal").modal("show");
            });
        });
    });
</script>

@* For Edit/Update *@
<div id="editModalContainer"></div>
<script>
    $(document).ready(function () {
        $(".btn-outline-primary").click(function () {
            const layoutId = $(this).data("layout-id");
            $("#editModalContainer").load("/Layout/EditModal?id=" + layoutId, function () {
                $("#editModal").modal("show");
            });
        });
    });
</script>




@* For Read/Show *@








@* The Model is not accessible in the javascript code that's one way to make done this   *@
@* var layoutData = @Html.Raw(Json.Serialize(Model)); // Serialize the Model data as JSON *@
@* <div id="diagramContainer"></div> *@

@* <script>
    var viewModel = layoutData.Select(layout => ({
        Oid: layout.Oid,
        Name: layout.Name,
        Width: layout.Width,
        Height: layout.Height,
        Machines: layout.Machines.Select(machine => ({
            Id: machine.Oid,
            Width: machine.Width,
            Height: machine.Height,
            PositionX: machine.PositionX,
            PositionY: machine.PositionY,
            RunningStatus: machine.RunningStatus,
            Name: machine.Name,
            Info1: machine.Info1,
            Info2: machine.Info2
        })).ToList()
    })).ToList();

    $(document).ready(function () {
        $(".show-button").click(function () {
            const targetLayoutOid = $(this).data("layout-id");
            const targetLayout = viewModel.find(layout => layout.Oid === targetLayoutOid);

            if (targetLayout) {
                const layoutWidth = targetLayout.Width;
                const layoutHeight = targetLayout.Height;
                const machines = targetLayout.Machines;

                const diagramContainer = document.getElementById("diagramContainer");
                const diagramOptions = {
                    width: layoutWidth,
                    height: layoutHeight,
                    nodes: machines.map(machine => ({
                        id: machine.Id.toString(),
                        width: machine.Width,
                        height: machine.Height,
                        x: machine.PositionX,
                        y: machine.PositionY,
                        type: "rectangle",
                        style: {
                            fill: (function () {
                                if (machine.RunningStatus) {
                                    return "green";
                                } else {
                                    return "red";
                                }
                            })()
                        },
                        title: `${machine.Name}\n${machine.Info1}\n${machine.Info2}`
                    })),
                    edges: [],
                    contextMenuEnabled: false
                };

                diagramContainer.innerHTML = ""; // Clear existing content
                const diagram = new DevExpress.ui.dxDiagram(diagramContainer, diagramOptions);
            } else {
                console.log("No Layout With The Specified Oid Found.");
            }
        });
    });
</script> *@






<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>


<br />
<br />
<br />

